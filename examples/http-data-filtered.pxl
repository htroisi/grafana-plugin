# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

'''
This query outputs a table of HTTP events (request and response pairs).
It produces output identical to Pixie's `px/http_data_filtered` script in the Live UI.

To filter the HTTP events, uncomment lines 41-43. Alternatively, use Grafana's
table column filtering feature:
https://grafana.com/docs/grafana/latest/visualizations/table/filter-table-columns/

This query is for use with Grafana's Pixie Datasource Plugin only,
as it uses Grafana macros for adding Grafana dashboard context.
'''

# Import Pixie's module for querying data.
import px

# Import HTTP events table.
df = px.DataFrame(table='http_events', start_time=__time_from)

# Add columns for service, pod info.
df.svc = df.ctx['service']
df.pod = df.ctx['pod']
df = df.drop('upid')

# EXAMPLE OPTIONAL FILTERS
#df = df[px.contains(df.svc, 'catalogue')]
#df = df[px.contains(df.pod, 'catalogue')]
#df = df[df.req_path == '/healthz']

# Avoid conversion to long format
df.timestamp = df.time_
df = df.drop(columns=['time_'])

# Keep only the selected columns (and order them in the following order)
df = df[['timestamp', 'remote_addr', 'remote_port', 'req_method', 'req_path', 'resp_status', 'resp_body', 'latency', 'svc', 'pod']]

# Output the DataFrame
px.display(df)
